import { ImageGenerate, ImageEdit } from "../types";
declare const FormData: any;
type FormData = import('form-data');
/**
 * Handles image-related operations, including generating and editing images.
 * @class AlleImage
 * @example
 * JavaScript (CommonJS) usage:
 * ```javascript
 * const client = require("alle-ai-sdk");
 * async function runImage() {
 *   const alleai = new client.AlleAIClient({ apiKey: "your-apiKey" });
 *   const image = await alleai.image.generate({
 *     models: ["dall-e-3", "grok-2-image"],
 *     prompt: "A beautiful landscape at sunset",
 *     width: 1024,
 *     height: 1024,
 *     n: 1,
 *     style_preset: "digital-art",
 *     model_specific_params: {
 *       // Optional model-specific parameters
 *     }
 *   });
 *   console.log(image);
 * }
 * runImage();
 * ```
 * @example
 * TypeScript usage:
 * ```typescript
 * import { AlleAIClient } from "alle-ai-sdk";
 * async function runImage() {
 *   const alleai = new AlleAIClient({ apiKey: "your-apiKey" });
 *   const image = await alleai.image.generate({
 *     models: ["dall-e-3", "grok-2-image"],
 *     prompt: "A beautiful landscape at sunset",
 *     width: 1024,
 *     height: 1024,
 *     n: 1,
 *     style_preset: "digital-art",
 *     model_specific_params: {
 *       // Optional model-specific parameters
 *     }
 *   });
 *   console.log(image);
 * }
 * runImage();
 * ```
 */
declare class AlleImage {
    private makeRequest;
    private makeFormDataRequest;
    /**
     * Creates an instance of AlleImage.
     * @param {function} makeRequest - The function to make JSON API requests
     * @param {function} makeFormDataRequest - The function to make FormData API requests
     */
    constructor(makeRequest: (endpoint: string, body: object) => Promise<any>, makeFormDataRequest: (endpoint: string, formData: FormData) => Promise<any>);
    /**
     * Generates images from the provided text prompt using multiple AI models.
     * @param {ImageGenerate} request - The request object containing:
     * - models: Array of model identifiers to use for generation (required)
     * - prompt: Text description of the desired image (required)
     * - width: (optional) Output image width in pixels
     * - height: (optional) Output image height in pixels
     * - n: (optional) Number of images to generate (default: 1)
     * - style_preset: (optional) Art style preset to apply
     * - seed: (optional) Random seed for reproducible results, can be null
     * - model_specific_params: (optional) Additional parameters specific to certain models
     * @returns {Promise<string>} A promise that resolves to the URL of the generated image
     * @throws {ValidationError} Will throw an error if required parameters are missing or invalid
     * @example
     * ```typescript
     * const image = await alleai.image.generate({
     *   models: ["dall-e-3", "grok-2-image"],
     *   prompt: "A beautiful landscape at sunset",
     *   width: 1024,
     *   height: 1024,
     *   n: 1,
     *   style_preset: "digital-art"
     * });
     * ```
     */
    generate({ models, prompt, width, height, n, style_preset, seed, model_specific_params, }: ImageGenerate): Promise<any>;
    /**
     * Edits an image based on the provided parameters.
     * @param {ImageEdit} request - The request object containing:
     * - models: Array of model identifiers to use for editing (required) - e.g., ["dall-e-3", "titan-image-generator"]
     * - prompt: Description of desired changes (required)
     * - image_file: Path to the image file or URL (required)
     * @returns {Promise<string>} A promise that resolves to the URL of the edited image
     * @throws {ValidationError} Will throw an error if required parameters are missing or invalid
     * @example
     * JavaScript (CommonJS) usage:
     * ```javascript
     * const client = require("alle-ai-sdk");
     * async function runImageEdit() {
     *   const alleai = new client.AlleAIClient({ apiKey: "your-apiKey" });
     *   const editedImage = await alleai.image.edit({
     *     models: ["dall-e-3", "titan-image-generator"],
     *     prompt: "Add a sunset background",
     *     image_file: "./input.jpg"  // or "https://example.com/image.jpg"
     *   });
     *   console.log(editedImage);
     * }
     * runImageEdit();
     * ```
     * @example
     * TypeScript usage:
     * ```typescript
     * import { AlleAIClient } from "alle-ai-sdk";
     * async function runImageEdit() {
     *   const alleai = new AlleAIClient({ apiKey: "your-apiKey" });
     *   const editedImage = await alleai.image.edit({
     *     models: ["dall-e-3", "titan-image-generator"],
     *     prompt: "Add a sunset background",
     *     image_file: "./input.jpg"  // or "https://example.com/image.jpg"
     *   });
     *   console.log(editedImage);
     * }
     * runImageEdit();
     * ```
     */
    edit({ models, prompt, image_file }: ImageEdit): Promise<any>;
}
export { AlleImage };
