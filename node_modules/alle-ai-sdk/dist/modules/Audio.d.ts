import { audioGenerateTypes, ttsTypes, sttTypes } from "../types";
declare const FormData: any;
type FormData = import('form-data');
/**
 * Handles audio-related operations, including generating audio from text,
 * text-to-speech, and speech-to-text.
 * @class AlleAudio
 * @example
 * JavaScript (CommonJS) usage:
 * ```javascript
 * const client = require("alle-ai-sdk");
 * async function runAudio() {
 *   const alleai = new client.AlleAIClient({ apiKey: "your-apiKey" });
 *   const audio = await alleai.audio.generate({
 *     models: ["lyria"],
 *     prompt: "A soothing jazz melody with soft piano and gentle saxophone",
 *     model_specific_params: {
 *       // Optional model-specific parameters
 *     }
 *   });
 *   console.log(audio);
 * }
 * runAudio();
 * ```
 * @example
 * TypeScript usage:
 * ```typescript
 * import { AlleAI } from "alle-ai-sdk";
 * async function runAudio() {
 *   const alleai = new AlleAIClient({ apiKey: "your-apiKey" });
 *   const audio = await alleai.audio.generate({
 *     models: ["lyria"],
 *     prompt: "A soothing jazz melody with soft piano and gentle saxophone",
 *     model_specific_params: {
 *       // Optional model-specific parameters
 *     }
 *   });
 *   console.log(audio);
 * }
 * runAudio();
 * ```
 */
declare class AlleAudio {
    private makeRequest;
    private makeFormDataRequest;
    /**
     * Creates an instance of AlleAudio.
     * @param {function} makeRequest - The function to make JSON API requests
     * @param {function} makeFormDataRequest - The function to make FormData API requests
     */
    constructor(makeRequest: (endpoint: string, body: object) => Promise<any>, makeFormDataRequest: (endpoint: string, formData: FormData) => Promise<any>);
    /**
     * Generates audio from the provided text prompt using AI model.
     * @param {audioGenerateTypes} request - The request object containing:
     * - models: Array of model identifiers to use for generation (required) - e.g., ["lyria"]
     * - prompt: Text description of the desired audio (required)
     * - model_specific_params: Additional parameters specific to the model (optional)
     * @returns {Promise<string>} A promise that resolves to the URL of the generated audio
     * @throws {ValidationError} Will throw an error if required parameters are missing or invalid
     * @example
     * JavaScript (CommonJS) usage:
     * ```javascript
     * const client = require("alle-ai-sdk");
     * async function runAudio() {
     *   const alleai = new client.AlleAIClient({ apiKey: "your-apiKey" });
     *   const audio = await alleai.audio.generate({
     *     models: ["lyria"],
     *     prompt: "A soothing jazz melody with soft piano and gentle saxophone",
     *     model_specific_params: {
     *       // Optional model-specific parameters
     *     }
     *   });
     *   console.log(audio);
     * }
     * runAudio();
     * ```
     * @example
     * TypeScript usage:
     * ```typescript
     * import { AlleAI } from "alle-ai-sdk";
     * async function runAudio() {
     *   const alleai = new AlleAIClient({ apiKey: "your-apiKey" });
     *   const audio = await alleai.audio.generate({
     *     models: ["lyria"],
     *     prompt: "A soothing jazz melody with soft piano and gentle saxophone",
     *     model_specific_params: {
     *       // Optional model-specific parameters
     *     }
     *   });
     *   console.log(audio);
     * }
     * runAudio();
     * ```
     */
    generate({ models, prompt, model_specific_params, }: audioGenerateTypes): Promise<any>;
    /**
     * Converts text to speech using AI model.
     * @param {ttsTypes} request - The request object containing:
     * - models: Array of model identifiers to use for text-to-speech (required) - e.g., ["gpt-4o-mini-tts"]
     * - prompt: Text to convert to speech (required)
     * - voice: Voice identifier to use (optional, defaults to "nova")
     * - model_specific_params: Additional parameters specific to the model (optional)
     * @returns {Promise<string>} A promise that resolves to the URL of the generated audio
     * @throws {ValidationError} Will throw an error if required parameters are missing or invalid
     * @example
     * JavaScript (CommonJS) usage:
     * ```javascript
     * const client = require("alle-ai-sdk");
     * async function runTTS() {
     *   const alleai = new client.AlleAIClient({ apiKey: "your-apiKey" });
     *   // With default voice
     *   const audio1 = await alleai.audio.tts({
     *     models: ["gpt-4o-mini-tts"],
     *     prompt: "Welcome to the future of AI technology."
     *   });
     *
     *   // With specific voice
     *   const audio2 = await alleai.audio.tts({
     *     models: ["gpt-4o-mini-tts"],
     *     prompt: "Welcome to the future of AI technology.",
     *     voice: "nova",
     *     model_specific_params: {
     *       // Optional model-specific parameters
     *     }
     *   });
     * }
     * runTTS();
     * ```
     * @example
     * TypeScript usage:
     * ```typescript
     * import { AlleAI } from "alle-ai-sdk";
     * async function runTTS() {
     *   const alleai = new AlleAIClient({ apiKey: "your-apiKey" });
     *   // With default voice
     *   const audio1 = await alleai.audio.tts({
     *     models: ["gpt-4o-mini-tts"],
     *     prompt: "Welcome to the future of AI technology."
     *   });
     *
     *   // With specific voice
     *   const audio2 = await alleai.audio.tts({
     *     models: ["gpt-4o-mini-tts"],
     *     prompt: "Welcome to the future of AI technology.",
     *     voice: "nova",
     *     model_specific_params: {
     *       // Optional model-specific parameters
     *     }
     *   });
     * }
     * runTTS();
     * ```
     */
    tts({ models, prompt, voice, model_specific_params, }: ttsTypes): Promise<any>;
    /**
     * Converts speech to text using AI model.
     * @param {sttTypes} request - The request object containing:
     * - models: Array of model identifiers to use for speech-to-text (required) - e.g., ["gpt-4o-transcribe"]
     * - audio_file: Path to audio file or URL (required)
     * - model_specific_params: Additional parameters specific to the model (optional)
     * @returns {Promise<string>} A promise that resolves to the transcribed text
     * @throws {ValidationError} Will throw an error if required parameters are missing or invalid
     * @example
     * JavaScript (CommonJS) usage:
     * ```javascript
     * const client = require("alle-ai-sdk");
     * async function runSTT() {
     *   const alleai = new client.AlleAIClient({ apiKey: "your-apiKey" });
     *   const text = await alleai.audio.stt({
     *     models: ["gpt-4o-transcribe"],
     *     audio_file: "./audio.mp3",  // or "https://example.com/audio.mp3"
     *     model_specific_params: {
     *       // Optional model-specific parameters
     *     }
     *   });
     *   console.log(text);
     * }
     * runSTT();
     * ```
     * @example
     * TypeScript usage:
     * ```typescript
     * import { AlleAI } from "alle-ai-sdk";
     * async function runSTT() {
     *   const alleai = new AlleAIClient({ apiKey: "your-apiKey" });
     *   const text = await alleai.audio.stt({
     *     models: ["gpt-4o-transcribe"],
     *     audio_file: "./audio.mp3",  // or "https://example.com/audio.mp3"
     *     model_specific_params: {
     *       // Optional model-specific parameters
     *     }
     *   });
     *   console.log(text);
     * }
     * runSTT();
     * ```
     */
    stt({ models, audio_file, model_specific_params, }: sttTypes): Promise<any>;
}
export { AlleAudio };
