/**
 * Base error class for AlleAI SDK
 */
class AlleAIError extends Error {
    constructor(message, code, status, details) {
        super(message);
        this.code = code;
        this.status = status;
        this.details = details;
        this.name = 'AlleAIError';
    }
}
/**
 * Error for validation failures
 */
class ValidationError extends AlleAIError {
    constructor(message, code = "VALIDATION_ERROR", details) {
        super(message, code, undefined, details);
        this.name = "ValidationError";
    }
}
/**
 * Error for API authentication issues
 */
class AuthenticationError extends AlleAIError {
    constructor(message, code = "AUTH_ERROR", details) {
        super(message, code, 401, details);
        this.name = "AuthenticationError";
    }
}
/**
 * Error for invalid API requests
 */
class InvalidRequestError extends AlleAIError {
    constructor(message, code = "INVALID_REQUEST", details) {
        super(message, code, 400, details);
        this.name = "InvalidRequestError";
    }
}
/**
 * Error for API rate limiting
 */
class RateLimitError extends AlleAIError {
    constructor(message, code = "RATE_LIMIT", details) {
        super(message, code, 429, details);
        this.name = "RateLimitError";
    }
}
/**
 * Error for server/service issues
 */
class ServiceUnavailableError extends AlleAIError {
    constructor(message, code = "SERVICE_ERROR", details) {
        super(message, code, 503, details);
        this.name = "ServiceUnavailableError";
    }
}
/**
 * Error for network/connection issues
 */
class ConnectionError extends AlleAIError {
    constructor(message, code = "CONNECTION_ERROR", details) {
        super(message, code, undefined, details);
        this.name = "ConnectionError";
    }
}
/**
 * Generic API error
 */
class APIError extends AlleAIError {
    constructor(message, code = "API_ERROR", status, details) {
        super(message, code, status, details);
        this.name = "APIError";
    }
}
export { AlleAIError, ValidationError, AuthenticationError, InvalidRequestError, RateLimitError, ServiceUnavailableError, ConnectionError, APIError };
